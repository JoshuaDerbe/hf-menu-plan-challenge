{
	"info": {
		"_postman_id": "75ce90fb-0b7a-4381-be0e-161af158c54e",
		"name": "hf_menu_plan",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "http://localhost:5000/api/ingredients/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", () => {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has correct error message\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).to.eql(\"JWT token not found in headers under 'Authorization'\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/ingredients/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"ingredients",
						""
					]
				},
				"description": "Get ingredients with no authentication"
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/signup/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct success message\", () => {\r",
							"    pm.expect(responseJson.results.email).to.eql(\"test@test.com\");\r",
							"})\r",
							"\r",
							"if (responseJson.results && responseJson.results.id) {\r",
							"   pm.globals.set(\"hf_user_id\", responseJson.results.id); \r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/signup/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"signup",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/login/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful login to a user\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.access_token).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.roles).to.eql(\"user\");\r",
							"    pm.globals.set(\"hf_user_access_token\", responseJson.access_token);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/login/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/ingredients/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Empty ingredient list\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.results.length).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{hf_user_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "test",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/ingredients/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"ingredients",
						""
					]
				},
				"description": "Get ingredients with authorization"
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/ingredients/add/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", () => {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"Need to be an admin to add an ingredient\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).to.eql(\"This endpoint requires all the following roles: ['admin']\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{hf_user_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"tomato\",\r\n    \"energy\": 20\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/ingredients/add/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"ingredients",
						"add",
						""
					]
				},
				"description": "Add ingredient as user not admin"
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/login/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful login to an admin\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.access_token).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.roles).to.eql(\"admin\");\r",
							"    pm.globals.set(\"hf_admin_access_token\", responseJson.access_token);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"admin@admin.com\",\r\n    \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/login/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"login",
						""
					]
				},
				"description": "Login to admin"
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/ingredients/add/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Successfuly added ingredient\", () => {\r",
							"    pm.expect(responseJson.results.name).to.eql(\"tomato\");\r",
							"    pm.expect(responseJson.results.energy).to.eql(20);\r",
							"});\r",
							"\r",
							"if (responseJson.results && responseJson.results.id) {\r",
							"   pm.globals.set(\"hf_ingredient_1\", responseJson.results.id); \r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{hf_admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"tomato\",\r\n    \"energy\": 20\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/ingredients/add/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"ingredients",
						"add",
						""
					]
				},
				"description": "Admin add ingredient"
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/ingredients/add/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Successfuly added ingredient\", () => {\r",
							"    pm.expect(responseJson.results.name).to.eql(\"potato\");\r",
							"    pm.expect(responseJson.results.energy).to.eql(30);\r",
							"});\r",
							"\r",
							"if (responseJson.results && responseJson.results.id) {\r",
							"   pm.globals.set(\"hf_ingredient_2\", responseJson.results.id); \r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{hf_admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"potato\",\r\n    \"energy\": 30\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/ingredients/add/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"ingredients",
						"add",
						""
					]
				},
				"description": "Admin add another ingredient"
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/ingredients/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successfuly retrive the two ingredients added earlier\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.results.length).to.eql(2);\r",
							"    pm.expect(responseJson.results[0].name).to.eql(\"tomato\");\r",
							"    pm.expect(responseJson.results[0].energy).to.eql(20);\r",
							"    pm.expect(responseJson.results[0].id).to.eql(1);\r",
							"    pm.expect(responseJson.results[1].name).to.eql(\"potato\");\r",
							"    pm.expect(responseJson.results[1].energy).to.eql(30);\r",
							"    pm.expect(responseJson.results[1].id).to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{hf_admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/ingredients/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"ingredients",
						""
					]
				},
				"description": "Get ingredients added previously"
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/ingredients/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successfuly one of the ingredients added earlier\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.results.length).to.eql(1);\r",
							"    pm.expect(responseJson.results[0].name).to.eql(\"potato\");\r",
							"    pm.expect(responseJson.results[0].energy).to.eql(30);\r",
							"    pm.expect(responseJson.results[0].id).to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{hf_admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"ids\": [{{hf_ingredient_2}}]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/ingredients/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"ingredients",
						""
					]
				},
				"description": "Retrieve a specific ingredient"
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/ingredients/edit/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successfuly changed name of tomato to yellow tomato and energy from 20 to 15\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.results.name).to.eql(\"yellow tomato\");\r",
							"    pm.expect(responseJson.results.energy).to.eql(15);\r",
							"    pm.expect(responseJson.results.id).to.eql(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{hf_admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{hf_ingredient_1}},\r\n    \"name\": \"yellow tomato\",\r\n    \"energy\": 15\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/ingredients/edit/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"ingredients",
						"edit",
						""
					]
				},
				"description": "Editing name and energy of an ingredient"
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/ingredients/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successfuly retrieve the ingredient edited earlier\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.results.length).to.eql(1);\r",
							"    pm.expect(responseJson.results[0].name).to.eql(\"yellow tomato\");\r",
							"    pm.expect(responseJson.results[0].energy).to.eql(15);\r",
							"    pm.expect(responseJson.results[0].id).to.eql(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{hf_admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"ids\": [{{hf_ingredient_1}}]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/ingredients/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"ingredients",
						""
					]
				},
				"description": "Retrieve ingredient edited earlier"
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/ingredients/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successfully delete ingredient with id 1\", () => {\r",
							"    pm.expect(pm.response.text()).to.eql(\"Successfully deleted ingredient with id 1.\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{hf_admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/ingredients/{{hf_ingredient_1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"ingredients",
						"{{hf_ingredient_1}}"
					]
				},
				"description": "Delete ingredient with id 1"
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/ingredients/2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successfully delete ingredient with id 2\", () => {\r",
							"    pm.expect(pm.response.text()).to.eql(\"Successfully deleted ingredient with id 2.\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{hf_admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/ingredients/{{hf_ingredient_2}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"ingredients",
						"{{hf_ingredient_2}}"
					]
				},
				"description": "Delete ingredient with id 2"
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/users/2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successfully delete user we created earlier\", () => {\r",
							"    pm.expect(pm.response.text()).to.eql(\"Successfully deleted user with id \" + pm.globals.get(\"hf_user_id\") + \".\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{hf_admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/users/{{hf_user_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"users",
						"{{hf_user_id}}"
					]
				},
				"description": "Delete the user with id 2"
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/ingredients/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Ingredients deleted earlier are successfully gone\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.results.length).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{hf_admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/ingredients/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"ingredients",
						""
					]
				},
				"description": "Request to check all ingredients are successfully deleted"
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/login/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", () => {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"User deleted earlier is successfully removed\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).to.eql(\"The username and/or password are incorrect\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/login/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"login",
						""
					]
				},
				"description": "Request to check the user deleted earlier is now gone"
			},
			"response": []
		}
	]
}